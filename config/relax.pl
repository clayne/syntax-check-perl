use strict;
use warnings;

my $filename = $ENV{PERL_SYNTAX_CHECK_FILENAME} || "";

my $new_check = do {
    my (@required_module, $is_fatpacked);
    my $MODULE = qr/[a-zA-Z0-9_:]+/o;
    sub {
        my ($line, $filename, $lines) = @_;
        return if $is_fatpacked;
        if ($line =~ /^# This chunk of stuff was generated by App::FatPacker/) {
            $is_fatpacked++;
            return;
        }
        if (my ($found) = $line =~ /(?:^|\s)($MODULE)->new/o) {
            return if grep { $found eq $_ } qw(shift __PACKAGE__);
            if (!@required_module) {
                for my $i (0 .. $#{$lines}) {
                    my $l = $lines->[$i];
                    if (my ($m) = $l =~ /\b(?:use|require)\s+($MODULE)/o) {
                        push @required_module, $m;
                    }
                    if ($l =~ /^\s*package/) {
                        if ($l =~ /^\s*package\s+($MODULE)/o) {
                            push @required_module, $1;
                        } elsif ($l =~ /^\s*package\s*$/) {
                            if ($lines->[$i+1] =~ /^\s*($MODULE)/o) {
                                push @required_module, $1;
                            }
                        }
                    }
                }
            }
            if (!grep { $_ eq $found } @required_module) {
                return "miss use $found";
            }
        }
        return;
    };
};

my $config = {
    compile => {
        skip => [
            qr/^Subroutine \S+ redefined/,
            qr/^Name "\S+" used only once/,
            $filename =~ /\.psgi$/
                ? (qr/^Useless use of single ref constructor in void context/)
                : (),
        ],
        use_module => [
            [ "indirect", "-M-indirect=fatal" ],
        ],
    },
    regexp => {
        check => [
            qr/^ \s* my \s* \( (.*?) \) \s* = \s* shift/x,
            qr/pakcage/, # no syntax check
        ],
    },
    custom => {
        check => [
            $new_check,
        ]
    },
};
